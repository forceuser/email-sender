import {
  button_esm_default,
  ripple_esm_default
} from "./chunk-CP2D64VN.js";
import {
  DomHandler
} from "./chunk-INPGEB5T.js";
import {
  Fragment,
  Transition,
  createBlock,
  createCommentVNode,
  createTextVNode,
  createVNode,
  openBlock,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDirective,
  toDisplayString,
  vShow,
  withCtx,
  withDirectives,
  withKeys
} from "./chunk-UHP5GRIX.js";
import "./chunk-AABLTR74.js";

// node_modules/primevue/progressbar/progressbar.esm.js
var script = {
  name: "ProgressBar",
  props: {
    value: Number,
    mode: {
      type: String,
      default: "determinate"
    },
    showValue: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    containerClass() {
      return [
        "p-progressbar p-component",
        {
          "p-progressbar-determinate": this.determinate,
          "p-progressbar-indeterminate": this.indeterminate
        }
      ];
    },
    progressStyle() {
      return {
        width: this.value + "%",
        display: "block"
      };
    },
    indeterminate() {
      return this.mode === "indeterminate";
    },
    determinate() {
      return this.mode === "determinate";
    }
  }
};
var _hoisted_1 = {
  key: 1,
  class: "p-progressbar-label"
};
var _hoisted_2 = {
  key: 2,
  class: "p-progressbar-indeterminate-container"
};
var _hoisted_3 = createVNode("div", {class: "p-progressbar-value p-progressbar-value-animate"}, null, -1);
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createBlock("div", {
    role: "progressbar",
    class: $options.containerClass,
    "aria-valuemin": "0",
    "aria-valuenow": $props.value,
    "aria-valuemax": "100"
  }, [
    $options.determinate ? (openBlock(), createBlock("div", {
      key: 0,
      class: "p-progressbar-value p-progressbar-value-animate",
      style: $options.progressStyle
    }, null, 4)) : createCommentVNode("", true),
    $options.determinate && $props.value && $props.showValue ? (openBlock(), createBlock("div", _hoisted_1, [
      renderSlot(_ctx.$slots, "default", {}, () => [
        createTextVNode(toDisplayString($props.value + "%"), 1)
      ])
    ])) : createCommentVNode("", true),
    $options.indeterminate ? (openBlock(), createBlock("div", _hoisted_2, [
      _hoisted_3
    ])) : createCommentVNode("", true)
  ], 10, ["aria-valuenow"]);
}
function styleInject(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = "\n.p-progressbar {\n    position: relative;\n    overflow: hidden;\n}\n.p-progressbar-determinate .p-progressbar-value {\n    height: 100%;\n    width: 0%;\n    position: absolute;\n    display: none;\n    border: 0 none;\n}\n.p-progressbar-determinate .p-progressbar-value-animate {\n    -webkit-transition: width 1s ease-in-out;\n    transition: width 1s ease-in-out;\n}\n.p-progressbar-determinate .p-progressbar-label {\n    text-align: center;\n    height: 100%;\n    width: 100%;\n    position: absolute;\n    font-weight: bold;\n}\n.p-progressbar-indeterminate .p-progressbar-value::before {\n      content: '';\n      position: absolute;\n      background-color: inherit;\n      top: 0;\n      left: 0;\n      bottom: 0;\n      will-change: left, right;\n      -webkit-animation: p-progressbar-indeterminate-anim 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n              animation: p-progressbar-indeterminate-anim 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n}\n.p-progressbar-indeterminate .p-progressbar-value::after {\n    content: '';\n    position: absolute;\n    background-color: inherit;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    will-change: left, right;\n    -webkit-animation: p-progressbar-indeterminate-anim-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;\n            animation: p-progressbar-indeterminate-anim-short 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) infinite;\n    -webkit-animation-delay: 1.15s;\n            animation-delay: 1.15s;\n}\n@-webkit-keyframes p-progressbar-indeterminate-anim {\n0% {\n    left: -35%;\n    right: 100%;\n}\n60% {\n    left: 100%;\n    right: -90%;\n}\n100% {\n    left: 100%;\n    right: -90%;\n}\n}\n@keyframes p-progressbar-indeterminate-anim {\n0% {\n    left: -35%;\n    right: 100%;\n}\n60% {\n    left: 100%;\n    right: -90%;\n}\n100% {\n    left: 100%;\n    right: -90%;\n}\n}\n@-webkit-keyframes p-progressbar-indeterminate-anim-short {\n0% {\n    left: -200%;\n    right: 100%;\n}\n60% {\n    left: 107%;\n    right: -8%;\n}\n100% {\n    left: 107%;\n    right: -8%;\n}\n}\n@keyframes p-progressbar-indeterminate-anim-short {\n0% {\n    left: -200%;\n    right: 100%;\n}\n60% {\n    left: 107%;\n    right: -8%;\n}\n100% {\n    left: 107%;\n    right: -8%;\n}\n}\n";
styleInject(css_248z);
script.render = render;
var progressbar_esm_default = script;

// node_modules/primevue/message/message.esm.js
var script2 = {
  name: "Message",
  emits: ["close"],
  props: {
    severity: {
      type: String,
      default: "info"
    },
    closable: {
      type: Boolean,
      default: true
    },
    sticky: {
      type: Boolean,
      default: true
    },
    life: {
      type: Number,
      default: 3e3
    }
  },
  timeout: null,
  data() {
    return {
      visible: true
    };
  },
  mounted() {
    if (!this.sticky) {
      setTimeout(() => {
        this.visible = false;
      }, this.life);
    }
  },
  methods: {
    close(event) {
      this.visible = false;
      this.$emit("close", event);
    }
  },
  computed: {
    containerClass() {
      return "p-message p-component p-message-" + this.severity;
    },
    iconClass() {
      return ["p-message-icon pi", {
        "pi-info-circle": this.severity === "info",
        "pi-check": this.severity === "success",
        "pi-exclamation-triangle": this.severity === "warn",
        "pi-times-circle": this.severity === "error"
      }];
    }
  },
  directives: {
    "ripple": ripple_esm_default
  }
};
var _hoisted_12 = {class: "p-message-wrapper"};
var _hoisted_22 = {class: "p-message-text"};
var _hoisted_32 = createVNode("i", {class: "p-message-close-icon pi pi-times"}, null, -1);
function render2(_ctx, _cache, $props, $setup, $data, $options) {
  const _directive_ripple = resolveDirective("ripple");
  return openBlock(), createBlock(Transition, {
    name: "p-message",
    appear: ""
  }, {
    default: withCtx(() => [
      withDirectives(createVNode("div", {
        class: $options.containerClass,
        role: "alert"
      }, [
        createVNode("div", _hoisted_12, [
          createVNode("span", {class: $options.iconClass}, null, 2),
          createVNode("div", _hoisted_22, [
            renderSlot(_ctx.$slots, "default")
          ]),
          $props.closable ? withDirectives((openBlock(), createBlock("button", {
            key: 0,
            class: "p-message-close p-link",
            onClick: _cache[1] || (_cache[1] = ($event) => $options.close($event)),
            type: "button"
          }, [
            _hoisted_32
          ], 512)), [
            [_directive_ripple]
          ]) : createCommentVNode("", true)
        ])
      ], 2), [
        [vShow, $data.visible]
      ])
    ]),
    _: 3
  });
}
function styleInject2(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z2 = "\n.p-message-wrapper {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n}\n.p-message-close {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n    -webkit-box-pack: center;\n        -ms-flex-pack: center;\n            justify-content: center;\n}\n.p-message-close.p-link {\n    margin-left: auto;\n    overflow: hidden;\n    position: relative;\n}\n.p-message-enter-from {\n    opacity: 0;\n}\n.p-message-enter-active {\n    -webkit-transition: opacity .3s;\n    transition: opacity .3s;\n}\n.p-message.p-message-leave-from {\n    max-height: 1000px;\n}\n.p-message.p-message-leave-to {\n    max-height: 0;\n    opacity: 0;\n    margin: 0 !important;\n}\n.p-message-leave-active {\n    overflow: hidden;\n    -webkit-transition: max-height .3s cubic-bezier(0, 1, 0, 1), opacity .3s, margin .15s;\n    transition: max-height .3s cubic-bezier(0, 1, 0, 1), opacity .3s, margin .15s;\n}\n.p-message-leave-active .p-message-close {\n    display: none;\n}\n";
styleInject2(css_248z2);
script2.render = render2;
var message_esm_default = script2;

// node_modules/primevue/fileupload/fileupload.esm.js
var script3 = {
  name: "FileUpload",
  emits: ["select", "uploader", "before-upload", "progress", "upload", "error", "before-send", "clear", "remove"],
  props: {
    name: {
      type: String,
      default: null
    },
    url: {
      type: String,
      default: null
    },
    mode: {
      type: String,
      default: "advanced"
    },
    multiple: {
      type: Boolean,
      default: false
    },
    accept: {
      type: String,
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    },
    auto: {
      type: Boolean,
      default: false
    },
    maxFileSize: {
      type: Number,
      default: null
    },
    invalidFileSizeMessage: {
      type: String,
      default: "{0}: Invalid file size, file size should be smaller than {1}."
    },
    invalidFileTypeMessage: {
      type: String,
      default: "{0}: Invalid file type, allowed file types: {1}."
    },
    fileLimit: {
      type: Number,
      default: null
    },
    invalidFileLimitMessage: {
      type: String,
      default: "Maximum number of files exceeded, limit is {0} at most."
    },
    withCredentials: {
      type: Boolean,
      default: false
    },
    previewWidth: {
      type: Number,
      default: 50
    },
    chooseLabel: {
      type: String,
      default: null
    },
    uploadLabel: {
      type: String,
      default: null
    },
    cancelLabel: {
      type: String,
      default: null
    },
    customUpload: {
      type: Boolean,
      default: false
    },
    showUploadButton: {
      type: Boolean,
      default: true
    },
    showCancelButton: {
      type: Boolean,
      default: true
    }
  },
  duplicateIEEvent: false,
  data() {
    return {
      uploadedFileCount: 0,
      files: [],
      messages: [],
      focused: false,
      progress: null
    };
  },
  methods: {
    onFileSelect(event) {
      if (event.type !== "drop" && this.isIE11() && this.duplicateIEEvent) {
        this.duplicateIEEvent = false;
        return;
      }
      this.messages = [];
      this.files = this.files || [];
      let files = event.dataTransfer ? event.dataTransfer.files : event.target.files;
      for (let file of files) {
        if (!this.isFileSelected(file)) {
          if (this.validate(file)) {
            if (this.isImage(file)) {
              file.objectURL = window.URL.createObjectURL(file);
            }
            this.files.push(file);
          }
        }
      }
      this.$emit("select", {originalEvent: event, files: this.files});
      if (this.fileLimit) {
        this.checkFileLimit();
      }
      if (this.auto && this.hasFiles && !this.isFileLimitExceeded()) {
        this.upload();
      }
      if (event.type !== "drop" && this.isIE11()) {
        this.clearIEInput();
      } else {
        this.clearInputElement();
      }
    },
    choose() {
      this.$refs.fileInput.click();
    },
    upload() {
      if (this.customUpload) {
        if (this.fileLimit) {
          this.uploadedFileCount += this.files.length;
        }
        this.$emit("uploader", {files: this.files});
      } else {
        let xhr = new XMLHttpRequest();
        let formData = new FormData();
        this.$emit("before-upload", {
          "xhr": xhr,
          "formData": formData
        });
        for (let file of this.files) {
          formData.append(this.name, file, file.name);
        }
        xhr.upload.addEventListener("progress", (event) => {
          if (event.lengthComputable) {
            this.progress = Math.round(event.loaded * 100 / event.total);
          }
          this.$emit("progress", {
            originalEvent: event,
            progress: this.progress
          });
        });
        xhr.onreadystatechange = () => {
          if (xhr.readyState === 4) {
            this.progress = 0;
            if (xhr.status >= 200 && xhr.status < 300) {
              if (this.fileLimit) {
                this.uploadedFileCount += this.files.length;
              }
              this.$emit("upload", {
                xhr,
                files: this.files
              });
            } else {
              this.$emit("error", {
                xhr,
                files: this.files
              });
            }
            this.clear();
          }
        };
        xhr.open("POST", this.url, true);
        this.$emit("before-send", {
          "xhr": xhr,
          "formData": formData
        });
        xhr.withCredentials = this.withCredentials;
        xhr.send(formData);
      }
    },
    clear() {
      this.files = [];
      this.messages = null;
      this.$emit("clear");
      if (this.isAdvanced) {
        this.clearInputElement();
      }
    },
    onFocus() {
      this.focused = true;
    },
    onBlur() {
      this.focused = false;
    },
    isFileSelected(file) {
      if (this.files && this.files.length) {
        for (let sFile of this.files) {
          if (sFile.name + sFile.type + sFile.size === file.name + file.type + file.size)
            return true;
        }
      }
      return false;
    },
    isIE11() {
      return !!window["MSInputMethodContext"] && !!document["documentMode"];
    },
    validate(file) {
      if (this.accept && !this.isFileTypeValid(file)) {
        this.messages.push(this.invalidFileTypeMessage.replace("{0}", file.name).replace("{1}", this.accept));
        return false;
      }
      if (this.maxFileSize && file.size > this.maxFileSize) {
        this.messages.push(this.invalidFileSizeMessage.replace("{0}", file.name).replace("{1}", this.formatSize(this.maxFileSize)));
        return false;
      }
      return true;
    },
    isFileTypeValid(file) {
      let acceptableTypes = this.accept.split(",").map((type) => type.trim());
      for (let type of acceptableTypes) {
        let acceptable = this.isWildcard(type) ? this.getTypeClass(file.type) === this.getTypeClass(type) : file.type == type || this.getFileExtension(file).toLowerCase() === type.toLowerCase();
        if (acceptable) {
          return true;
        }
      }
      return false;
    },
    getTypeClass(fileType) {
      return fileType.substring(0, fileType.indexOf("/"));
    },
    isWildcard(fileType) {
      return fileType.indexOf("*") !== -1;
    },
    getFileExtension(file) {
      return "." + file.name.split(".").pop();
    },
    isImage(file) {
      return /^image\//.test(file.type);
    },
    onDragEnter(event) {
      if (!this.disabled) {
        event.stopPropagation();
        event.preventDefault();
      }
    },
    onDragOver(event) {
      if (!this.disabled) {
        DomHandler.addClass(this.$refs.content, "p-fileupload-highlight");
        event.stopPropagation();
        event.preventDefault();
      }
    },
    onDragLeave() {
      if (!this.disabled) {
        DomHandler.removeClass(this.$refs.content, "p-fileupload-highlight");
      }
    },
    onDrop(event) {
      if (!this.disabled) {
        DomHandler.removeClass(this.$refs.content, "p-fileupload-highlight");
        event.stopPropagation();
        event.preventDefault();
        const files = event.dataTransfer ? event.dataTransfer.files : event.target.files;
        const allowDrop = this.multiple || files && files.length === 1;
        if (allowDrop) {
          this.onFileSelect(event);
        }
      }
    },
    onBasicUploaderClick() {
      if (this.hasFiles)
        this.upload();
      else
        this.$refs.fileInput.click();
    },
    remove(index) {
      this.clearInputElement();
      let removedFile = this.files.splice(index, 1)[0];
      this.files = [...this.files];
      this.$emit("remove", {
        file: removedFile,
        files: this.files
      });
    },
    clearInputElement() {
      this.$refs.fileInput.value = "";
    },
    clearIEInput() {
      if (this.$refs.fileInput) {
        this.duplicateIEEvent = true;
        this.$refs.fileInput.value = "";
      }
    },
    formatSize(bytes) {
      if (bytes === 0) {
        return "0 B";
      }
      let k = 1e3, dm = 3, sizes = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"], i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + " " + sizes[i];
    },
    isFileLimitExceeded() {
      if (this.fileLimit && this.fileLimit <= this.files.length + this.uploadedFileCount && this.focused) {
        this.focused = false;
      }
      return this.fileLimit && this.fileLimit < this.files.length + this.uploadedFileCount;
    },
    checkFileLimit() {
      if (this.isFileLimitExceeded()) {
        this.messages.push(this.invalidFileLimitMessage.replace("{0}", this.fileLimit.toString()));
      }
    }
  },
  computed: {
    isAdvanced() {
      return this.mode === "advanced";
    },
    isBasic() {
      return this.mode === "basic";
    },
    advancedChooseButtonClass() {
      return [
        "p-button p-component p-fileupload-choose",
        {
          "p-disabled": this.disabled,
          "p-focus": this.focused
        }
      ];
    },
    basicChooseButtonClass() {
      return ["p-button p-component p-fileupload-choose", {
        "p-fileupload-choose-selected": this.hasFiles,
        "p-disabled": this.disabled,
        "p-focus": this.focused
      }];
    },
    basicChooseButtonIconClass() {
      return ["p-button-icon p-button-icon-left pi", {
        "pi-plus": !this.hasFiles || this.auto,
        "pi-upload": this.hasFiles && !this.auto
      }];
    },
    basicChooseButtonLabel() {
      return this.auto ? this.chooseButtonLabel : this.hasFiles ? this.files[0].name : this.chooseButtonLabel;
    },
    hasFiles() {
      return this.files && this.files.length > 0;
    },
    chooseDisabled() {
      return this.disabled || this.fileLimit && this.fileLimit <= this.files.length + this.uploadedFileCount;
    },
    uploadDisabled() {
      return this.disabled || !this.hasFiles || this.fileLimit < this.files.length;
    },
    cancelDisabled() {
      return this.disabled || !this.hasFiles;
    },
    chooseButtonLabel() {
      return this.chooseLabel || this.$primevue.config.locale.choose;
    },
    uploadButtonLabel() {
      return this.uploadLabel || this.$primevue.config.locale.upload;
    },
    cancelButtonLabel() {
      return this.cancelLabel || this.$primevue.config.locale.cancel;
    }
  },
  components: {
    "FileUploadButton": button_esm_default,
    "FileUploadProgressBar": progressbar_esm_default,
    "FileUploadMessage": message_esm_default
  },
  directives: {
    "ripple": ripple_esm_default
  }
};
var _hoisted_13 = {
  key: 0,
  class: "p-fileupload p-fileupload-advanced p-component"
};
var _hoisted_23 = {class: "p-fileupload-buttonbar"};
var _hoisted_33 = createVNode("span", {class: "p-button-icon p-button-icon-left pi pi-fw pi-plus"}, null, -1);
var _hoisted_4 = {class: "p-button-label"};
var _hoisted_5 = {
  key: 1,
  class: "p-fileupload-files"
};
var _hoisted_6 = {class: "p-fileupload-filename"};
var _hoisted_7 = {
  key: 2,
  class: "p-fileupload-empty"
};
var _hoisted_8 = {
  key: 1,
  class: "p-fileupload p-fileupload-basic p-component"
};
var _hoisted_9 = {class: "p-button-label"};
function render3(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_FileUploadButton = resolveComponent("FileUploadButton");
  const _component_FileUploadProgressBar = resolveComponent("FileUploadProgressBar");
  const _component_FileUploadMessage = resolveComponent("FileUploadMessage");
  const _directive_ripple = resolveDirective("ripple");
  return $options.isAdvanced ? (openBlock(), createBlock("div", _hoisted_13, [
    createVNode("div", _hoisted_23, [
      withDirectives(createVNode("span", {
        class: $options.advancedChooseButtonClass,
        onClick: _cache[2] || (_cache[2] = (...args) => $options.choose && $options.choose(...args)),
        onKeydown: _cache[3] || (_cache[3] = withKeys((...args) => $options.choose && $options.choose(...args), ["enter"])),
        onFocus: _cache[4] || (_cache[4] = (...args) => $options.onFocus && $options.onFocus(...args)),
        onBlur: _cache[5] || (_cache[5] = (...args) => $options.onBlur && $options.onBlur(...args)),
        tabindex: "0"
      }, [
        createVNode("input", {
          ref: "fileInput",
          type: "file",
          onChange: _cache[1] || (_cache[1] = (...args) => $options.onFileSelect && $options.onFileSelect(...args)),
          multiple: $props.multiple,
          accept: $props.accept,
          disabled: $options.chooseDisabled
        }, null, 40, ["multiple", "accept", "disabled"]),
        _hoisted_33,
        createVNode("span", _hoisted_4, toDisplayString($options.chooseButtonLabel), 1)
      ], 34), [
        [_directive_ripple]
      ]),
      $props.showUploadButton ? (openBlock(), createBlock(_component_FileUploadButton, {
        key: 0,
        label: $options.uploadButtonLabel,
        icon: "pi pi-upload",
        onClick: $options.upload,
        disabled: $options.uploadDisabled
      }, null, 8, ["label", "onClick", "disabled"])) : createCommentVNode("", true),
      $props.showCancelButton ? (openBlock(), createBlock(_component_FileUploadButton, {
        key: 1,
        label: $options.cancelButtonLabel,
        icon: "pi pi-times",
        onClick: $options.clear,
        disabled: $options.cancelDisabled
      }, null, 8, ["label", "onClick", "disabled"])) : createCommentVNode("", true)
    ]),
    createVNode("div", {
      ref: "content",
      class: "p-fileupload-content",
      onDragenter: _cache[6] || (_cache[6] = (...args) => $options.onDragEnter && $options.onDragEnter(...args)),
      onDragover: _cache[7] || (_cache[7] = (...args) => $options.onDragOver && $options.onDragOver(...args)),
      onDragleave: _cache[8] || (_cache[8] = (...args) => $options.onDragLeave && $options.onDragLeave(...args)),
      onDrop: _cache[9] || (_cache[9] = (...args) => $options.onDrop && $options.onDrop(...args))
    }, [
      $options.hasFiles ? (openBlock(), createBlock(_component_FileUploadProgressBar, {
        key: 0,
        value: $data.progress
      }, null, 8, ["value"])) : createCommentVNode("", true),
      (openBlock(true), createBlock(Fragment, null, renderList($data.messages, (msg) => {
        return openBlock(), createBlock(_component_FileUploadMessage, {
          severity: "error",
          key: msg
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(msg), 1)
          ]),
          _: 2
        }, 1024);
      }), 128)),
      $options.hasFiles ? (openBlock(), createBlock("div", _hoisted_5, [
        (openBlock(true), createBlock(Fragment, null, renderList($data.files, (file, index) => {
          return openBlock(), createBlock("div", {
            class: "p-fileupload-row",
            key: file.name + file.type + file.size
          }, [
            createVNode("div", null, [
              $options.isImage(file) ? (openBlock(), createBlock("img", {
                key: 0,
                role: "presentation",
                alt: file.name,
                src: file.objectURL,
                width: $props.previewWidth
              }, null, 8, ["alt", "src", "width"])) : createCommentVNode("", true)
            ]),
            createVNode("div", _hoisted_6, toDisplayString(file.name), 1),
            createVNode("div", null, toDisplayString($options.formatSize(file.size)), 1),
            createVNode("div", null, [
              createVNode(_component_FileUploadButton, {
                type: "button",
                icon: "pi pi-times",
                onClick: ($event) => $options.remove(index)
              }, null, 8, ["onClick"])
            ])
          ]);
        }), 128))
      ])) : createCommentVNode("", true),
      _ctx.$slots.empty && !$options.hasFiles ? (openBlock(), createBlock("div", _hoisted_7, [
        renderSlot(_ctx.$slots, "empty")
      ])) : createCommentVNode("", true)
    ], 544)
  ])) : $options.isBasic ? (openBlock(), createBlock("div", _hoisted_8, [
    (openBlock(true), createBlock(Fragment, null, renderList($data.messages, (msg) => {
      return openBlock(), createBlock(_component_FileUploadMessage, {
        severity: "error",
        key: msg
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString(msg), 1)
        ]),
        _: 2
      }, 1024);
    }), 128)),
    withDirectives(createVNode("span", {
      class: $options.basicChooseButtonClass,
      onMouseup: _cache[13] || (_cache[13] = (...args) => $options.onBasicUploaderClick && $options.onBasicUploaderClick(...args)),
      onKeydown: _cache[14] || (_cache[14] = withKeys((...args) => $options.choose && $options.choose(...args), ["enter"])),
      onFocus: _cache[15] || (_cache[15] = (...args) => $options.onFocus && $options.onFocus(...args)),
      onBlur: _cache[16] || (_cache[16] = (...args) => $options.onBlur && $options.onBlur(...args)),
      tabindex: "0"
    }, [
      createVNode("span", {class: $options.basicChooseButtonIconClass}, null, 2),
      createVNode("span", _hoisted_9, toDisplayString($options.basicChooseButtonLabel), 1),
      !$options.hasFiles ? (openBlock(), createBlock("input", {
        key: 0,
        ref: "fileInput",
        type: "file",
        accept: $props.accept,
        disabled: $props.disabled,
        onChange: _cache[10] || (_cache[10] = (...args) => $options.onFileSelect && $options.onFileSelect(...args)),
        onFocus: _cache[11] || (_cache[11] = (...args) => $options.onFocus && $options.onFocus(...args)),
        onBlur: _cache[12] || (_cache[12] = (...args) => $options.onBlur && $options.onBlur(...args))
      }, null, 40, ["accept", "disabled"])) : createCommentVNode("", true)
    ], 34), [
      [_directive_ripple]
    ])
  ])) : createCommentVNode("", true);
}
function styleInject3(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z3 = "\n.p-fileupload-content {\n    position: relative;\n}\n.p-fileupload-row {\n    display: -webkit-box;\n    display: -ms-flexbox;\n    display: flex;\n    -webkit-box-align: center;\n        -ms-flex-align: center;\n            align-items: center;\n}\n.p-fileupload-row > div {\n    -webkit-box-flex: 1;\n        -ms-flex: 1 1 auto;\n            flex: 1 1 auto;\n    width: 25%;\n}\n.p-fileupload-row > div:last-child {\n    text-align: right;\n}\n.p-fileupload-content .p-progressbar {\n    width: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n}\n.p-button.p-fileupload-choose {\n    position: relative;\n    overflow: hidden;\n}\n.p-button.p-fileupload-choose input[type=file] {\n    display: none;\n}\n.p-fileupload-choose.p-fileupload-choose-selected input[type=file] {\n    display: none;\n}\n.p-fileupload-filename {\n    word-break: break-all;\n}\n.p-fluid .p-fileupload .p-button {\n    width: auto;\n}\n";
styleInject3(css_248z3);
script3.render = render3;
var fileupload_esm_default = script3;

// dep:primevue_fileupload
var primevue_fileupload_default = fileupload_esm_default;
export {
  primevue_fileupload_default as default
};
//# sourceMappingURL=primevue_fileupload.js.map
